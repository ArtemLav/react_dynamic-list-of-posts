{"version":3,"sources":["api/api.js","api/posts.js","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Comments/Comments.jsx","components/PostDetails/PostDetails.jsx","api/users.js","components/SelectUser/SelectUser.jsx","App.jsx","index.js"],"names":["request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getUserPosts","userId","a","posts","filter","post","getPostDetails","postId","details","Loader","className","PostsList","React","memo","currentUserId","currentPostId","changePost","useState","setPosts","isLoading","setIsLoading","useEffect","loadPosts","postsFromApi","map","key","id","title","type","onClick","getPostComments","postComments","comment","deleteComment","commentId","method","postNewComment","name","email","body","headers","JSON","stringify","NewCommentForm","loadPostComments","setName","setEmail","setBody","onSubmit","e","preventDefault","value","onChange","target","placeholder","Comments","comments","PostDetails","postDetails","setPostDetails","setComments","isCommentsVisible","setIsCommentsVisible","loadPostDetails","postDetailsFromApi","commentsFromApi","length","getUsers","users","SelectUser","handleUserSelect","setUsers","loadUsers","useCallback","usersFromApi","slice","user","index","App","setCurrentUserId","setCurrentPostId","event","ReactDOM","render","document","getElementById"],"mappings":"6XAEaA,EAAU,SAACC,EAAKC,GAAN,OAAkBC,MAAM,GAAD,OAFtB,kCAEsB,OAAeF,GAAOC,GACjEE,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,UAEjBN,MAAK,SAAAO,GAAM,OAAIA,EAAOC,SCRZC,EAAY,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACNf,EAAQ,UADF,UACpBgB,EADoB,OAGrBF,EAHqB,yCAIjBE,GAJiB,gCAOnBA,EAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKJ,SAAWA,MAPlB,2CAAH,sDAUZK,EAAc,uCAAG,WAAMC,GAAN,eAAAL,EAAA,sEACNf,EAAQ,UAAD,OAAWoB,IADZ,cACtBC,EADsB,yBAGrBA,GAHqB,2CAAH,sDCTdC,G,MAAS,kBACpB,yBAAKC,UAAU,UACb,yBAAKA,UAAU,uBCCNC,G,MAAYC,IAAMC,MAAK,YAI7B,IAHLC,EAGI,EAHJA,cACAC,EAEI,EAFJA,cACAC,EACI,EADJA,WACI,EACsBC,mBAAS,IAD/B,mBACGd,EADH,KACUe,EADV,OAE8BD,oBAAS,GAFvC,mBAEGE,EAFH,KAEcC,EAFd,KAIJC,qBAAU,WACRC,MACC,CAACR,IAEJ,IAAMQ,EAAS,uCAAG,4BAAApB,EAAA,6DAChBkB,GAAa,GADG,SAEWpB,EAAac,GAFxB,OAEVS,EAFU,OAIhBL,EAASK,GACTH,GAAa,GALG,2CAAH,qDAQf,OACE,yBAAKV,UAAU,aACb,sCAECS,EACC,kBAAC,EAAD,MAEA,wBAAIT,UAAU,mBACXP,EAAMqB,KAAI,SAAAnB,GAAI,OACb,wBACEK,UAAU,kBACVe,IAAKpB,EAAKqB,IAEV,6BACE,4CAAcrB,EAAKJ,OAAnB,OACCI,EAAKsB,OAER,4BACEC,KAAK,SACLlB,UAAU,2BACVmB,QAAS,kBAAMb,EAAWX,EAAKqB,MAE9BX,IAAkBV,EAAKqB,GAAK,QAAU,kBC9C1CI,G,MAAe,uCAAG,WAAMvB,GAAN,eAAAL,EAAA,sEACFf,EAAQ,aADN,cACvB4C,EADuB,yBAGtBA,EAAa3B,QAAO,SAAA4B,GAAO,OAAIA,EAAQzB,SAAWA,MAH5B,2CAAH,uDAMf0B,EAAgB,SAAAC,GAAS,OJYhB9C,EIZ2B,aAAD,OAAc8C,GJYjC/C,EAAQC,EAAK,CACxC+C,OAAQ,WADY,IAAA/C,GIVTgD,EAAc,uCAAG,WAC5B7B,EACA8B,EACAC,EACAC,GAJ4B,SAAArC,EAAA,gFJEJH,EIGH,CACrBQ,SACA8B,OACAC,QACAC,QJPiCpD,EIGzB,YJHsC,CAC9CgD,OAAQ,OACRK,QAAS,CACP,eAAgB,mCAElBD,KAAME,KAAKC,UAAU3C,OIPO,iCJEV,IAAMA,IIFI,OAAH,4DCLd4C,EAAiB/B,IAAMC,MAAK,YAGlC,IAFLE,EAEI,EAFJA,cACA6B,EACI,EADJA,iBACI,EACoB3B,mBAAS,IAD7B,mBACGoB,EADH,KACSQ,EADT,OAEsB5B,mBAAS,IAF/B,mBAEGqB,EAFH,KAEUQ,EAFV,OAGoB7B,mBAAS,IAH7B,mBAGGsB,EAHH,KAGSQ,EAHT,KAkBJ,OACE,0BAAMrC,UAAU,iBAAiBsC,SAdlB,SAACC,GAChBA,EAAEC,iBACGb,GAASC,GAAUC,IAIxBH,EAAerB,EAAesB,EAAMC,EAAOC,GACxChD,MAAK,kBAAMqD,OACdC,EAAQ,IACRC,EAAS,IACTC,EAAQ,OAKN,yBAAKrC,UAAU,cACb,2BACEkB,KAAK,OACLS,KAAK,OACLc,MAAOd,EACPe,SAAU,SAAAH,GAAC,OAAIJ,EAAQI,EAAEI,OAAOF,QAChCG,YAAY,YACZ5C,UAAU,2BAId,yBAAKA,UAAU,cACb,2BACEkB,KAAK,QACLS,KAAK,QACLc,MAAOb,EACPc,SAAU,SAAAH,GAAC,OAAIH,EAASG,EAAEI,OAAOF,QACjCG,YAAY,aACZ5C,UAAU,2BAId,yBAAKA,UAAU,cACb,8BACE2B,KAAK,OACLc,MAAOZ,EACPa,SAAU,SAAAH,GAAC,OAAIF,EAAQE,EAAEI,OAAOF,QAChCG,YAAY,oBACZ5C,UAAU,2BAId,4BACEkB,KAAK,SACLlB,UAAU,wCAFZ,qBCxDO6C,G,MAAW3C,IAAMC,MAAK,YAAqC,IAAlC2C,EAAiC,EAAjCA,SAAUZ,EAAuB,EAAvBA,iBAK9C,OACE,wBAAIlC,UAAU,qBACX8C,EAAShC,KAAI,SAAAQ,GAAO,OACnB,wBACEP,IAAKO,EAAQN,GACbhB,UAAU,0BAEV,4BACEkB,KAAK,SACLlB,UAAU,oCACVmB,QAAS,kBAdIK,EAcgBF,EAAQN,QAb7CO,EAAcC,GAAW3C,MAAK,kBAAMqD,OADhB,IAACV,IAWf,KAOA,2BAAIF,EAAQO,eCfTkB,EAAc7C,IAAMC,MAAK,YAAwB,IAArBE,EAAoB,EAApBA,cAAoB,EACrBE,mBAAS,IADY,mBACpDyC,EADoD,KACvCC,EADuC,OAE3B1C,mBAAS,IAFkB,mBAEpDuC,EAFoD,KAE1CI,EAF0C,OAGT3C,oBAAS,GAHA,mBAGpD4C,EAHoD,KAGjCC,EAHiC,KAK3DzC,qBAAU,WACR0C,IACAnB,MACC,CAAC7B,IAEJ,IAAMgD,EAAe,uCAAG,4BAAA7D,EAAA,sEACWI,EAAeS,GAD1B,OAChBiD,EADgB,OAGtBL,EAAeK,GAHO,2CAAH,qDAMfpB,EAAgB,uCAAG,4BAAA1C,EAAA,sEACO4B,EAAgBf,GADvB,OACjBkD,EADiB,OAGvBL,EAAYK,GAHW,2CAAH,qDAMtB,OACE,yBAAKvD,UAAU,eACb,6CAEA,6BAASA,UAAU,qBACjB,2BAAIgD,EAAYnB,OAGlB,6BAAS7B,UAAU,yBAChB8C,EAASU,OACR,4BACEtC,KAAK,SACLlB,UAAU,SACVmB,QAAS,kBAAMiC,GAAsBD,KAHvC,UAKMA,EACF,OAEA,OARJ,YASOL,EAASU,OAThB,cAYA,+CAGDL,GACC,kBAACN,EAAD,CACEC,SAAUA,EACVZ,iBAAkBA,KAKxB,iCACE,yBAAKlC,UAAU,6BACb,kBAAC,EAAD,CACEK,cAAeA,EACf6B,iBAAkBA,UCjEjBuB,EAAQ,uCAAG,4BAAAjE,EAAA,sEACFf,EAAQ,UADN,cAChBiF,EADgB,yBAGfA,GAHe,2CAAH,qDCERC,EAAazD,IAAMC,MAAK,YAA0C,IAAvCC,EAAsC,EAAtCA,cAAewD,EAAuB,EAAvBA,iBAAuB,EAClDrD,mBAAS,IADyC,mBACrEmD,EADqE,KAC9DG,EAD8D,KAG5ElD,qBAAU,WACRmD,MACC,IAEH,IAAMA,EAAYC,sBAAW,sBAAC,4BAAAvE,EAAA,sEACDiE,IADC,OACtBO,EADsB,OAG5BH,EAASG,EAAaC,MAAM,EAAG,KAHH,2CAI3B,IAEH,OACE,qDAGE,4BACExB,MAAOrC,EACPsC,SAAUkB,EACV5D,UAAU,sBAEV,4BAAQyC,MAAM,KAAd,aACCiB,EAAM5C,KAAI,SAACoD,EAAMC,GAAP,OACT,4BACEpD,IAAKmD,EAAKlD,GACVyB,MAAO0B,EAAQ,GAEdD,EAAKvC,cCuBHyC,EAhDH,WAAO,IAAD,EAC0B7D,mBAAS,GADnC,mBACTH,EADS,KACMiE,EADN,OAE0B9D,mBAAS,GAFnC,mBAETF,EAFS,KAEMiE,EAFN,KAIVV,EAAmBG,uBAAY,SAACQ,GACpCF,GAAkBE,EAAM5B,OAAOF,SAC9B,IAYH,OACE,yBAAKzC,UAAU,OACb,4BAAQA,UAAU,eAChB,kBAAC2D,EAAD,CACEvD,cAAeA,EACfwD,iBAAkBA,KAItB,0BAAM5D,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEI,cAAeA,EACfC,cAAeA,EACfC,WAxBS,SAACT,GAOlByE,EANIzE,IAAWQ,EAMER,EALE,OA0Bf,yBAAKG,UAAU,gBACZK,EACC,kBAAC,EAAD,CAAaA,cAAeA,IAE5B,qEC1CZmE,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.2e8c278a.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const remove = url => request(url, {\n  method: 'DELETE',\n});\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts');\n\n  if (!userId) {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const details = await request(`/posts/${postId}`);\n\n  return details;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\nexport const PostsList = React.memo(({\n  currentUserId,\n  currentPostId,\n  changePost,\n}) => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    loadPosts();\n  }, [currentUserId]);\n\n  const loadPosts = async() => {\n    setIsLoading(true);\n    const postsFromApi = await getUserPosts(currentUserId);\n\n    setPosts(postsFromApi);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li\n              className=\"PostsList__item\"\n              key={post.id}\n            >\n              <div>\n                <b>{`[User #${post.userId}]:`}</b>\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => changePost(post.id)}\n              >\n                {currentPostId === post.id ? 'Close' : 'Open'}\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n});\n\nPostsList.propTypes = {\n  currentUserId: PropTypes.number.isRequired,\n  currentPostId: PropTypes.number.isRequired,\n  changePost: PropTypes.func.isRequired,\n};\n","import { request, remove, post } from './api';\n\nexport const getPostComments = async(postId) => {\n  const postComments = await request('/comments');\n\n  return postComments.filter(comment => comment.postId === postId);\n};\n\nexport const deleteComment = commentId => remove(`/comments/${commentId}`);\n\nexport const postNewComment = async(\n  postId,\n  name,\n  email,\n  body,\n) => post('/comments', {\n  postId,\n  name,\n  email,\n  body,\n});\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\nimport { postNewComment } from '../../api/comments';\n\nexport const NewCommentForm = React.memo(({\n  currentPostId,\n  loadPostComments,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (!name || !email || !body) {\n      return;\n    }\n\n    postNewComment(currentPostId, name, email, body)\n      .then(() => loadPostComments());\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          onChange={e => setBody(e.target.value)}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n\nNewCommentForm.propTypes = {\n  currentPostId: PropTypes.number.isRequired,\n  loadPostComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { deleteComment } from '../../api/comments';\n\nexport const Comments = React.memo(({ comments, loadPostComments }) => {\n  const removeComment = (commentId) => {\n    deleteComment(commentId).then(() => loadPostComments());\n  };\n\n  return (\n    <ul className=\"PostDetails__list\">\n      {comments.map(comment => (\n        <li\n          key={comment.id}\n          className=\"PostDetails__list-item\"\n        >\n          <button\n            type=\"button\"\n            className=\"PostDetails__remove-button button\"\n            onClick={() => removeComment(comment.id)}\n          >\n            X\n          </button>\n          <p>{comment.body}</p>\n        </li>\n      ))}\n    </ul>\n  );\n});\n\nComments.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    body: PropTypes.string.isRequired,\n  })).isRequired,\n  loadPostComments: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\nimport './PostDetails.scss';\nimport { Comments } from '../Comments/Comments';\n\nexport const PostDetails = React.memo(({ currentPostId }) => {\n  const [postDetails, setPostDetails] = useState({});\n  const [comments, setComments] = useState([]);\n  const [isCommentsVisible, setIsCommentsVisible] = useState(false);\n\n  useEffect(() => {\n    loadPostDetails();\n    loadPostComments();\n  }, [currentPostId]);\n\n  const loadPostDetails = async() => {\n    const postDetailsFromApi = await getPostDetails(currentPostId);\n\n    setPostDetails(postDetailsFromApi);\n  };\n\n  const loadPostComments = async() => {\n    const commentsFromApi = await getPostComments(currentPostId);\n\n    setComments(commentsFromApi);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setIsCommentsVisible(!isCommentsVisible)}\n          >\n            {`${isCommentsVisible ? (\n              'Hide'\n            ) : (\n              'Show'\n            )} ${comments.length} comments`}\n          </button>\n        ) : (\n          <h4>No Comments yet</h4>\n        )}\n\n        {isCommentsVisible && (\n          <Comments\n            comments={comments}\n            loadPostComments={loadPostComments}\n          />\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            currentPostId={currentPostId}\n            loadPostComments={loadPostComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n});\n\nPostDetails.propTypes = {\n  currentPostId: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport const getUsers = async() => {\n  const users = await request('/users');\n\n  return users;\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api/users';\n\nexport const SelectUser = React.memo(({ currentUserId, handleUserSelect }) => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadUsers = useCallback(async() => {\n    const usersFromApi = await getUsers();\n\n    setUsers(usersFromApi.slice(0, 10));\n  }, []);\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        value={currentUserId}\n        onChange={handleUserSelect}\n        className=\"App__user-selector\"\n      >\n        <option value=\"0\">All users</option>\n        {users.map((user, index) => (\n          <option\n            key={user.id}\n            value={index + 1}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n});\n\nSelectUser.propTypes = {\n  currentUserId: PropTypes.number.isRequired,\n  handleUserSelect: PropTypes.func.isRequired,\n};\n","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { SelectUser } from './components/SelectUser/SelectUser';\n\nconst App = () => {\n  const [currentUserId, setCurrentUserId] = useState(0);\n  const [currentPostId, setCurrentPostId] = useState(0);\n\n  const handleUserSelect = useCallback((event) => {\n    setCurrentUserId(+event.target.value);\n  }, []);\n\n  const changePost = (postId) => {\n    if (postId === currentPostId) {\n      setCurrentPostId(0);\n\n      return;\n    }\n\n    setCurrentPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <SelectUser\n          currentUserId={currentUserId}\n          handleUserSelect={handleUserSelect}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            currentUserId={currentUserId}\n            currentPostId={currentPostId}\n            changePost={changePost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {currentPostId ? (\n            <PostDetails currentPostId={currentPostId} />\n          ) : (\n            <h4>Open any post to see it&apos;s details</h4>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}